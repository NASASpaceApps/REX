{
  "name": "dottie",
  "version": "0.0.6-1",
  "devDependencies": {
    "buster": "*"
  },
  "description": "Object traversing/manipulation util",
  "author": {
    "name": "Mick Hansen",
    "email": "mh@innofluence.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/innofluence/dottie.js.git"
  },
  "main": "dottie.js",
  "scripts": {
    "test": "./node_modules/.bin/buster-test"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/innofluence/dottie.js.png)](http://travis-ci.org/innofluence/dottie.js)\n\n## Install\n    npm install dottie\n\n## Usage\nFor detailed usage, check source or tests.\n\n### Get value\nGets nested value, or undefined if unreachable.\n\n    var values = {\n        some: {\n            nested: {\n                key: 'foobar';\n            }\n        }\n    }\n\n    dottie.get(values, 'some.nested.key'); // returns 'foobar'\n    dottie.get(values, 'some.undefined.key'); // returns undefined\n\n### Set value\nSets nested value, creates nested structure if needed\n\n    dottie.set(values, 'some.nested.value', someValue);\n\n### Transform object\nTransform object from keys with dottie notation to nested objects\n\n    var values = {\n        'user.name': 'Mick Hansen',\n        'user.email': 'mh@innofluence.com',\n        'user.professional.title': 'Developer',\n        'user.professional.employer': 'Innofluence'\n    };\n    var transformed = dottie.transform(values);\n\n    transforms is now equal to =\n    {\n        user: {\n            name: 'Mick Hansen',\n            email: 'mh@innofluence.com',\n            professional: {\n                title: 'Developer',\n                employer: 'Innofluence'\n            }\n        }\n    }",
  "readmeFilename": "README.md",
  "_id": "dottie@0.0.6-1",
  "_from": "dottie@0.0.6-1"
}
